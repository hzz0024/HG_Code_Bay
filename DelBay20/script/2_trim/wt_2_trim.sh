#!/bin/bash
for i in {1..19}
do
    echo -e 'start=`date +%s`  ## date at start\nBASEDIR=/workdir/hz269/DelBay20\nTRIMMOMATIC=/programs/trimmomatic/trimmomatic-0.39.jar\nSAMPLELIST=$BASEDIR/sample_lists/fastq_list_'$i'.txt # Path to a list of prefixes of the raw fastq files. It should be a subset of the the 1st column of the sample table.\nSAMPLETABLE=$BASEDIR/sample_lists/fastq_table.txt # Path to a sample table where the 1st column is the prefix of the raw fastq files. The 4th column is the sample ID, the 2nd column is the lane number, and the 3rd column is sequence ID. The combination of these three columns have to be unique. The 6th column should be data type, which is either pe or se.\nRAWFASTQDIR=$BASEDIR/raw_fastq/ # Path to raw fastq files.\nRAWFASTQSUFFIX1=_1.fq.gz # Suffix to raw fastq files. Use forward reads with paired-end data.\nRAWFASTQSUFFIX2=_2.fq.gz # Suffix to raw fastq files. Use reverse reads with paired-end data.\nADAPTERS=$BASEDIR/reference/NexteraPE-PE.fa # Path to a list of adapter/index sequences, copied from /programs/bbmap-38.86/resources/adapters.fa or /programs/trimmomatic/adapters/TruSeq3-PE-2.fa\n\n## Loop over each sample\nfor SAMPLEFILE in `cat $SAMPLELIST`; do\n\t## Extract relevant values from a table of sample, sequencing, and lane ID (here in columns 4, 3, 2, respectively) for each sequenced library\n\tSAMPLE_ID=`grep -P "${SAMPLEFILE}\\t" $SAMPLETABLE | cut -f 4`\n\tPOP_ID=`grep -P "${SAMPLEFILE}\\t" $SAMPLETABLE | cut -f 5`\n\tSEQ_ID=`grep -P "${SAMPLEFILE}\\t" $SAMPLETABLE | cut -f 3`\n\tLANE_ID=`grep -P "${SAMPLEFILE}\\t" $SAMPLETABLE | cut -f 2`\n\tSAMPLE_UNIQ_ID=$SAMPLE_ID'\''_'\''$POP_ID'\''_'\''$SEQ_ID'\''_'\''$LANE_ID  # When a sample has been sequenced in multiple lanes, we need to be able to identify the files from each run uniquely\n\techo "Sample: $SAMPLE_UNIQ_ID"\n\t## Extract data type from the sample table\n\tDATATYPE=`grep -P "${SAMPLEFILE}\\t" $SAMPLETABLE | cut -f 6`\n\n\t## The input and output path and file prefix\n\tRAWFASTQ_ID=$RAWFASTQDIR$SAMPLEFILE\n\tSAMPLEADAPT=$BASEDIR'\''/adapter_clipped/'\''$SAMPLE_UNIQ_ID\n\n\t## Adapter clip the reads with Trimmomatic\n\t# The options for ILLUMINACLIP are: ILLUMINACLIP:<fastaWithAdaptersEtc>:<seed mismatches>:<palindrome clip threshold>:<simple clip threshold>:<minAdapterLength>:<keepBothReads>\n\t# The MINLENGTH drops the read if it is below the specified length in bp\n\t# For definitions of these options, see http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/TrimmomaticManual_V0.32.pdf\n\n\tif [ $DATATYPE = pe ]; then\n\t\tjava -jar $TRIMMOMATIC PE -threads 1 -phred33 $RAWFASTQ_ID$RAWFASTQSUFFIX1 $RAWFASTQ_ID$RAWFASTQSUFFIX2 $SAMPLEADAPT'\''_adapter_clipped_f_paired.fastq.gz'\'' $SAMPLEADAPT'\''_adapter_clipped_f_unpaired.fastq.gz'\'' $SAMPLEADAPT'\''_adapter_clipped_r_paired.fastq.gz'\'' $SAMPLEADAPT'\''_adapter_clipped_r_unpaired.fastq.gz'\'' '\''ILLUMINACLIP:'\''$ADAPTERS'\'':2:30:10:1:true MINLENGTH:80'\''\n\n\telif [ $DATATYPE = se ]; then\n\t\tjava -jar $TRIMMOMATIC SE -threads 1 -phred33 $RAWFASTQ_ID$RAWFASTQSUFFIX1 $SAMPLEADAPT'\''_adapter_clipped_se.fastq.gz'\'' '\''ILLUMINACLIP:'\''$ADAPTERS'\'':2:30:10 MINLENGTH:40'\''\n\t\tfi\n\ndone\n\nend=`date +%s` ## date at end\nruntime=$((end-start))\nhours=$((runtime / 3600))\nminutes=$(( (runtime % 3600) / 60 ))\nseconds=$(( (runtime % 3600) % 60 ))\necho "Runtime: $hours:$minutes:$seconds (hh:mm:ss)"' >> formal/'2_trim_'$i'.sh'
	#echo -e 'module load angsd/0.931\n###this script will work on bamfiles by population and calculate saf & maf\n# maybe edit\ntarget="'$pop'"\nNB_CPU=20 #change accordingly\nREGIONS="-rf chr_list.txt" #optional\n#REGIONS="" # to remove the options to focus on a limited number of regions\n\n#prepare variables - avoid to modify\nsource /workdir/hz269/01_scripts/01_config.sh\nN_IND=$(wc -l $'$pop' | cut -d " " -f 1)\nMIN_IND=$(($N_IND*7/10))\n\necho "Ouput can be used for depth evaluation with all individuals listed in "$'$pop'\necho "keep loci with at leat one read for n individuals = "$MIN_IND", which is 70% of total "$N_IND" individuals"\necho "filter on allele frequency = "$MIN_MAF\n\nangsd -P $NB_CPU -doMaf 1 -dosaf 1 -GL 1 -doGlf 2 -doMajorMinor 1 -doCounts 1 -doDepth 1 -maxDepth 1000 -dumpCounts 2 -anc $ANC -remove_bads 1 -minMapQ 30 -minQ 20 -SNP_pval 1e-6 -minInd $MIN_IND -minMaf $MIN_MAF -setMaxDepth 384 -b $'$pop' -out "/workdir/hz269/04_saf_maf_gl_all/"$target"_maf"$MIN_MAF"_pctind"$PERCENT_IND"_cv30"\nangsd -P $NB_CPU -doMaf 1 -dosaf 1 -GL 1 -doGlf 2 -doMajorMinor 1 -doCounts 1 -doDepth 1 -maxDepth 1000 -dumpCounts 2 -anc $ANC -remove_bads 1 -minMapQ 30 -minQ 20 -minInd $MIN_IND -setMaxDepth 384 -b $'$pop' -out "/workdir/hz269/04_saf_maf_gl_all/"$target"_maf"$MIN_MAF"_pctind"$PERCENT_IND"_cv30_allvar"\n#main features\n# -P nb of threads\n# -doMaf 1 (allele frequencies)  -dosaf (prior for SFS) -GL (Genotype likelihood 1 samtools method - export GL in beagle format  -doGLF2)\n# -doMajorMinor 1 use the most frequent allele as major\n# -anc provide a ancestral sequence = reference in our case\n# -rf (file with the region written) work on a defined region : OPTIONAL\n# -b (bamlist) input file\n# -out  output file\n\n#main filters\n#filter on bam files -remove_bads (remove files with flag above 255) -minMapQ minimum mapquality -minQ minimum quality of reads\n#filter on frequency -minInd (minimum number of individuals with at least one read at this locus) we set it to 70%\n#filter on allele frequency -minMaf, set to 0.05\n\n#extract SNP which passed the MIN_MAF and PERCENT_IND filters & their Major-minor alleles\n#order the sites file by chromosome names\n#makes a region file matching the sites files and with same order\n#index sites file\necho "from the maf file, extract a list of SNP chr, positoin, major all, minor all"\ncd /workdir/hz269/04_saf_maf_gl_all\nzcat "$target"_maf"$MIN_MAF"_pctind"$PERCENT_IND"_cv30.mafs.gz | tail -n +2 > FILE_cv30.tmp && mv FILE_cv30.tmp "$target"_snplist_cv30\nawk '\''{print $1,$2,$3,$4}'\'' "$target"_snplist_cv30 > "$target"_sites_all_maf"$MIN_MAF"_pctind"$PERCENT_IND"_maxdepth3dv_snplist_4col_cv30\nangsd sites index "$target"_sites_all_maf"$MIN_MAF"_pctind"$PERCENT_IND"_maxdepth3dv_snplist_4col_cv30' >> formal/'04_saf_maf_al_all_'$pop'_cv30.sh'
done
