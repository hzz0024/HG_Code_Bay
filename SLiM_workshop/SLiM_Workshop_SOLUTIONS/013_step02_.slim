function (void)dumpFrequencies(object<Mutation> muts) {
	if (muts.size())
	{
		freqs = sim.mutationFrequencies(NULL, muts);
		coeffs = muts.selectionCoeff;
		catn();
		print(cbind(freqs, coeffs));
	}
}

initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);       // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, 0.5);  // QTLs
	m2.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", c(m1,m2), c(0.9,0.1));
	initializeGenomicElement(g1, 0, 20000);
	initializeGenomicElement(g2, 20001, 30000);
	initializeGenomicElement(g1, 30001, 99999);
	initializeRecombinationRate(1e-8);
}
fitness(m2) { return 1.0; }
1 { sim.addSubpop("p1", 500); }
1: late() {
	inds = sim.subpopulations.individuals;
	phenotypes = inds.sumOfMutationsOfType(m2);
	inds.fitnessScaling = 1.0 + dnorm(phenotypes, 10.0, 5.0) * 10.0;
	
	// Output and check for termination
	mean_phenotype = mean(phenotypes);
	
	if (abs(mean_phenotype - 10.0) < 0.1)
	{
		catn("\n" + sim.generation + ": REACHED OPTIMUM");
		catn("Final phenotype == " + mean_phenotype);
		dumpFrequencies(sim.mutationsOfType(m2));
		sim.simulationFinished();
	}
	else if (sim.generation % 100 == 0)
	{
		catn(sim.generation + ": Mean phenotype == " + mean_phenotype);
	}
}
20000 late() {
	catn("\nDID NOT REACH OPTIMUM");
	dumpFrequencies(sim.mutationsOfType(m2));
}
