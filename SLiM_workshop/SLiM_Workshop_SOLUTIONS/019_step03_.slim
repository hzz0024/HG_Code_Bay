// Keywords: continuous space, continuous spatial landscape, reprising boundaries

initialize() {
	initializeSLiMModelType("nonWF");
	defineConstant("K", 1000);
	defineConstant("S", 0.1);
	initializeSLiMOptions(dimensionality="xy");
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S*3);
	i1.setInteractionFunction("n", 1.0, S);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.1);
}
reproduction() {
	mate = i2.nearestNeighbors(individual, 3);
	if (!mate.size())
		return;
	mate = sample(mate, 1);
	
	for (i in seqLen(rpois(1, 0.1)))
	{
		pos = individual.spatialPosition + rnorm(2, 0, 0.02);
		offspring = subpop.addCrossed(individual, mate);
		offspring.setSpatialPosition(p1.pointReflected(pos));
	}
}
1 early() {
	sim.addSubpop("p1", 1000);
	p1.individuals.setSpatialPosition(p1.pointUniform(1000));
}
1: early() {
	i1.evaluate();
	inds = sim.subpopulations.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	competition = (competition + 1) / (2 * PI * S^2);
	inds.fitnessScaling = K / competition;
	
	// occasional natural disasters
//	if (runif(1) < 0.1) {
//		epicenter = p1.pointUniform();
//		d = i1.distanceToPoint(inds, epicenter);
//		affected = inds[d < 0.3];
//		affected.color = "cornflowerblue";
//		affected.fitnessScaling = 0.0;
//	}
}
1: late() {
	i2.evaluate();
}
2000 late() { sim.outputFixedMutations(); }
