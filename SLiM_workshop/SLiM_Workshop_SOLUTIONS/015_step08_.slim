// set up a simple neutral nonWF simulation
initialize() {
	initializeSLiMModelType("nonWF");
	defineConstant("K", 500);	// carrying capacity
	
	// neutral mutations, which are allowed to fix
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	initializeMutationType("m2", 0.5, "f", -0.1);
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
}

// each individual reproduces itself once
reproduction() {
	// randomize the order of p1.individuals
	parents = sample(p1.individuals, p1.individualCount);
	
	// draw monogamous pairs and generate litters
	for (i in seq(0, p1.individualCount - 2, by=2))
	{
		parent1 = parents[i];
		parent2 = parents[i + 1];
		litterSize = rpois(1, 2.7);
		
		for (j in seqLen(litterSize))
			p1.addCrossed(parent1, parent2);
	}
	
	// disable this callback for this generation
	self.active = 0;
}

// create an initial population of 10 individuals
1 early() {
	sim.addSubpop("p1", 10);
	p1.genomes.addNewDrawnMutation(m2, 10000);
}

// provide density-dependent selection
early() {
	inds = p1.individuals;
	inds.fitnessScaling = ifelse(inds.age <= 2, 1.0, 0.0);
	
	p1.fitnessScaling = K / sum(inds.fitnessScaling);
}

late() {
	inds = p1.individuals;
	cat(sim.generation + ": " + size(inds));
	catn(" (" + max(inds.age) + ", " + mean(inds.age) + ")");
}

// output all fixed mutations at end
2000 late() { sim.outputFixedMutations(); }
